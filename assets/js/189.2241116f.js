(window.webpackJsonp=window.webpackJsonp||[]).push([[189],{752:function(s,a,t){"use strict";t.r(a);var n=t(17),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注解"}},[s._v("#")]),s._v(" 注解")]),s._v(" "),t("h3",{attrs:{id:"理解注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#理解注解"}},[s._v("#")]),s._v(" 理解注解")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("**注解（Annotation）**是从 JDK5.0 开始引入的一个新技术")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("注解的作用")])]),s._v(" "),t("ol",[t("li",[s._v("注解并不是程序本身，但却可以对程序作出解释，解释的内容也称之为元数据")]),s._v(" "),t("li",[t("strong",[s._v("注解可以被其它程序读取")])])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("注解的书写格式")])]),s._v(" "),t("p",[s._v("以 "),t("code",[s._v("@注释名")]),s._v(" 的格式在代码中存在")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("注解可以在哪里使用")])]),s._v(" "),t("p",[s._v("可以附加在 "),t("code",[s._v("package")]),s._v("、"),t("code",[s._v("class")]),s._v("、"),t("code",[s._v("method")]),s._v("、"),t("code",[s._v("field")]),s._v(" 等上面，相当于给它们添加了额外的辅助信息。我们可以通过反射机制编程实现对这些元数据的访问")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("JAVA 中的注解类似于 TypeScript 中的装饰器")])])])]),s._v(" "),t("h3",{attrs:{id:"内置注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内置注解"}},[s._v("#")]),s._v(" 内置注解")]),s._v(" "),t("p",[s._v("常见的内置注解有下面三种")]),s._v(" "),t("ol",[t("li",[t("p",[t("strong",[s._v("@Override")])]),s._v(" "),t("p",[s._v("定义在 java.lang.Override 中，此注解只能用于修饰方法。表示要重写超类的一个方法")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("@Deprecated")])]),s._v(" "),t("p",[s._v("定义在 java.lang.Deprecated 中，此注解可以用于修饰属性、方法、类。表示不鼓励程序员使用被修饰的元素")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("@SuppressWarnings")])]),s._v(" "),t("p",[s._v("定义在 java.lang.SuppressWarnings 中，用于抑制编译时的警告信息")]),s._v(" "),t("p",[s._v("与前两个注解不同，你需要添加一个参数才能正确使用，这些参数都是已经定义好了的，我们选择性地使用即可，比如：")]),s._v(" "),t("p",[t("code",[s._v('@SuppressWarnings("all")')])]),s._v(" "),t("p",[t("code",[s._v('@SuppressWarnings("unchecked")')])]),s._v(" "),t("p",[t("code",[s._v('@SuppressWarnings(value={"unchecked", "deprecated"})')])])])]),s._v(" "),t("h3",{attrs:{id:"元注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元注解"}},[s._v("#")]),s._v(" 元注解")]),s._v(" "),t("p",[s._v("元注解的作用就是负责注解其它注解（也称为"),t("strong",[s._v("注解的注解")]),s._v("），Java 中定义了4个标准的 meta-annotation 类型，它们被用来提供对其它 annotation 类型的说明")]),s._v(" "),t("p",[s._v("这些类型和它们所支持的类可以在 java.lang.annotation 包中找到")]),s._v(" "),t("ol",[t("li",[t("p",[t("strong",[s._v("@Target")])]),s._v(" "),t("p",[s._v("用于描述注解的使用范围")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("@Retention")])]),s._v(" "),t("p",[s._v("表示需要在什么级别使用保存该注解信息，用于描述注解的生命周期")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("@Document")])]),s._v(" "),t("p",[s._v("说明该注解将包含在 javadoc 中")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("@Inherited")])]),s._v(" "),t("p",[s._v("说明子类可以继承该父类中的注解")])])]),s._v(" "),t("p",[s._v("定义一个注解："),t("code",[s._v("[public] @interface 注解名")])]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用元注解")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Target")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ElementType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("METHOD"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyAnnotation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("h3",{attrs:{id:"自定义注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义注解"}},[s._v("#")]),s._v(" 自定义注解")]),s._v(" "),t("p",[s._v("自定义注解格式："),t("code",[s._v("[public] @interface 注解名{定义内容}")])]),s._v(" "),t("p",[s._v("使用 @interface 自定义注解时，自动继承了 java.lang.annotation.Annotation 接口")]),s._v(" "),t("p",[s._v("当注解的 "),t("code",[s._v("定义内容")]),s._v(" 中有 "),t("code",[s._v("value")]),s._v(" 字段，在使用注解时传递的参数可以不写 "),t("code",[s._v("value")]),s._v("， 直接写参数值即可，例子如下")]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@MyAnnotation2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@MyAnnotation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lkj"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"使用了自定义注解"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/**\n * 定义一个注解 MyAnnotation，该注解只能在方法上使用\n * 该注解需要传递一个 name 参数，如果没有传递，默认为 ""\n */')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Target")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ElementType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("METHOD"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyAnnotation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("name")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n * 定义一个注解 MyAnnotation2，该注解只能在方法上使用\n * 该注解需要传递一个 value 参数\n */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Target")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ElementType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("METHOD"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyAnnotation2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("h2",{attrs:{id:"反射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[s._v("#")]),s._v(" 反射")]),s._v(" "),t("h3",{attrs:{id:"理解反射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#理解反射"}},[s._v("#")]),s._v(" 理解反射")]),s._v(" "),t("p",[s._v("反射是 java 被视为动态语言的关键，反射机制允许程序在执行期间借助 Reflection API 取得任何类的内部消息，并能直接操作任意对象的内部属性和方法")]),s._v(" "),t("p",[s._v("加载完类后，在堆内存的方法区中就产生了一个 Class 类型的对象（"),t("strong",[s._v("一个类只有一个 Class 对象，并且 Class 对象不是我们 new 出来的，是类加载器（ClassLoader）加载出来的")]),s._v("），这个对象就包含了完整的类的结构信息，因此我们可以通过这个对象看到类的结构。换言之，这个对象就像一面镜子，透过这个镜子可以看到类的结构，所以，我们也形象的称之为"),t("strong",[s._v("反射")])]),s._v(" "),t("p",[s._v("反射之所以被称为框架的灵魂，主要是因为它赋予了我们"),t("strong",[s._v("在运行时分析类以及执行类中方法")]),s._v("的能力。")]),s._v(" "),t("p",[t("strong",[s._v("正常方式")])]),s._v(" "),t("ol",[t("li",[s._v("引入需要的包类名称")]),s._v(" "),t("li",[s._v("通过 new 实例化")]),s._v(" "),t("li",[s._v("取得实例化对象")])]),s._v(" "),t("p",[t("strong",[s._v("反射方式")])]),s._v(" "),t("ol",[t("li",[s._v("取得实例化对象")]),s._v(" "),t("li",[s._v("调用 getClass() 方法")]),s._v(" "),t("li",[s._v("取得完整的包类名称")])]),s._v(" "),t("h3",{attrs:{id:"优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[s._v("#")]),s._v(" 优缺点")]),s._v(" "),t("h4",{attrs:{id:"优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),t("p",[s._v("可以实现动态创建对象和编译，体现出很大的灵活性")]),s._v(" "),t("h4",{attrs:{id:"缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),t("p",[t("strong",[s._v("对性能有影响")]),s._v("。使用反射基本上是一种解释操作，我们可以告诉 JVM ，我们希望做什么并且满足我们的要求。这类操作总是慢于直接执行相同的操作。")]),s._v(" "),t("h3",{attrs:{id:"反射相关类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射相关类"}},[s._v("#")]),s._v(" 反射相关类")]),s._v(" "),t("h4",{attrs:{id:"java-lang-class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-class"}},[s._v("#")]),s._v(" java.lang.Class")]),s._v(" "),t("h4",{attrs:{id:"java-lang-reflect-field"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-reflect-field"}},[s._v("#")]),s._v(" java.lang.reflect.Field")]),s._v(" "),t("h4",{attrs:{id:"java-lang-reflect-method"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-reflect-method"}},[s._v("#")]),s._v(" java.lang.reflect.Method")]),s._v(" "),t("h4",{attrs:{id:"java-lang-reflect-constructor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-reflect-constructor"}},[s._v("#")]),s._v(" java.lang.reflect.Constructor")]),s._v(" "),t("h3",{attrs:{id:"获取class类对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取class类对象"}},[s._v("#")]),s._v(" 获取Class类对象")]),s._v(" "),t("ol",[t("li",[t("p",[t("strong",[s._v("前提")]),s._v("：已知一个类的全类名，且该类在类路径下，可通过 Class 类的静态方法 forName() 获取，可能抛出 ClassNotFountException 异常。")]),s._v(" "),t("p",[t("strong",[s._v("实例")]),s._v('：Class cls = Class.forName("java.lang.Cat");')]),s._v(" "),t("p",[t("strong",[s._v("应用场景")]),s._v("：多用于配置文件，读取类全路径，加载类")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("前提")]),s._v("：若已知具体的类，通过类的 class 属性获取，该方法最为安全可靠，程序性能最高。")]),s._v(" "),t("p",[t("strong",[s._v("实例")]),s._v("：Class cls = Cat.class;")]),s._v(" "),t("p",[t("strong",[s._v("应用场景")]),s._v("：多用于参数传递，比如通过反射，得到对应构造器对象")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("前提")]),s._v("：已知某个类的实例，调用该实例的 getClass() 方法获取 Class 对象。")]),s._v(" "),t("p",[t("strong",[s._v("实例")]),s._v("：Class cls = 对象.getClass();")]),s._v(" "),t("p",[t("strong",[s._v("应用场景")]),s._v("：通过创建好的对象，获取 Class 对象")])]),s._v(" "),t("li",[t("p",[s._v("其它方式：通过类加载器（4种）")]),s._v(" "),t("p",[s._v("ClassLoader cl = 对象.getClass().getClassLoader();")]),s._v(" "),t("p",[s._v("Cl.loadeClass(类的全路径);")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("基本数据类型")]),s._v("的 Class 类对象")]),s._v(" "),t("p",[s._v("Class cl = 基本数据类型.class;")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("包装数据类型")]),s._v("的 Class 类对象")]),s._v(" "),t("p",[s._v("Class cl = 包装数据类型.TYPE;")])])]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" aClass "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"basicNode.TreeNode"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第一种方式获取 Class 对象："')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" aClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" treeNodeClass "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第二种方式获取 Class 对象："')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" treeNodeClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeNode")]),s._v(" treeNode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeNode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" aClass1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" treeNode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第三种方式获取 Class 对象："')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" aClass1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),s._v(" classLoader "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" aClass1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" aClass2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" classLoader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"basicNode.TreeNode"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"第四种方式获取 Class 对象："')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" aClass2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" integerClass "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"基本数据类型的 Class 对象："')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" integerClass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Boolean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Boolean")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("TYPE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"包装数据类型的 Class 对象："')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h3",{attrs:{id:"哪些类型有class对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#哪些类型有class对象"}},[s._v("#")]),s._v(" 哪些类型有Class对象")]),s._v(" "),t("ol",[t("li",[s._v("类")]),s._v(" "),t("li",[s._v("接口（interface）")]),s._v(" "),t("li",[s._v("数组")]),s._v(" "),t("li",[s._v("枚举（enum）")]),s._v(" "),t("li",[s._v("注解（annotation）")]),s._v(" "),t("li",[s._v("基本数据类型")]),s._v(" "),t("li",[s._v("void")])]),s._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" stringClass "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 普通类")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Serializable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" serializableClass "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Serializable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 接口")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" aClass "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 数组")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Deprecated")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" deprecatedClass "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Deprecated")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 注解")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("State")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" stateClass "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("State")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 枚举")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Void")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" voidClass "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// void")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" classClass "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Class")]),s._v("\n")])])]),t("h3",{attrs:{id:"类加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载"}},[s._v("#")]),s._v(" 类加载")]),s._v(" "),t("p",[s._v("反射机制是 java 实现动态语言的关键，也就是通过反射来实现类的"),t("strong",[s._v("动态加载")])]),s._v(" "),t("ol",[t("li",[s._v("静态加载：编译时加载相关的类，如果没有，则报错，依赖性太强")]),s._v(" "),t("li",[s._v("动态加载：运行时加载需要的类，如果运行时不用该类，则不报错，降低了依赖性。反射就是采用了这种加载方式")])]),s._v(" "),t("p",[s._v("类加载的时机")]),s._v(" "),t("ol",[t("li",[s._v("当通过 new 的方式创建对象时。属于静态加载")]),s._v(" "),t("li",[s._v("当子类被加载时，父类也被加载。属于静态加载")]),s._v(" "),t("li",[s._v("调用类中的静态成员时。属于静态加载")]),s._v(" "),t("li",[t("strong",[s._v("通过反射。属于动态加载")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);