(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{589:function(t,s,a){"use strict";a.r(s);var n=a(17),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"回溯算法的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法的理解"}},[t._v("#")]),t._v(" 回溯算法的理解")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("回溯问题最重要的就是根据题意画出树形结构图，然后分析 for 循环为树的宽度、递归为树的深度")])]),t._v(" "),a("li",[a("p",[t._v("回溯的本质是暴力求解（暴力枚举）")])]),t._v(" "),a("li",[a("p",[t._v("回溯通过剪枝操作可以进行优化")])])]),t._v(" "),a("h2",{attrs:{id:"回溯模板代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回溯模板代码"}},[t._v("#")]),t._v(" 回溯模板代码")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("backtrack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最终结果集")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前路径")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_backtrack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("参数")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("终止条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      存放结果"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("选择： 本层集合中元素（ 树中节点孩子的数量就是集合的大小）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      处理节点"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 做选择")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_backtrack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归")]),t._v("\n      回溯， 撤销处理结果 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 撤销选择")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_backtrack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("参数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"画图分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#画图分析"}},[t._v("#")]),t._v(" 画图分析")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/liukj98/image-hosting@master/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90/%E6%B5%81%E7%A8%8B%E5%9B%BE.56vyor03uvk0.webp",alt:"流程图"}})]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("问题1")]),t._v("：集合中存在重复元素或不存在重复元素")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("问题2")]),t._v("：每层 for 循环从哪里开始遍历")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("问题3")]),t._v("：每进行一次操作是否应作为结果进行收集")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("问题4")]),t._v("：在同一集合中操作还不同集合中操作")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);