(window.webpackJsonp=window.webpackJsonp||[]).push([[194],{757:function(s,t,a){"use strict";a.r(t);var e=a(17),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"shell-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shell-是什么"}},[s._v("#")]),s._v(" shell 是什么")]),s._v(" "),a("p",[s._v("Shell 这个单词的原意是“外壳”，跟 kernel（内核）相对应，比喻内核外面的一层，即用户跟内核交互的"),a("strong",[s._v("对话界面。")])]),s._v(" "),a("ol",[a("li",[a("p",[a("s",[s._v("Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁")])])]),s._v(" "),a("li",[a("p",[a("s",[s._v("Shell 既是一种命令解释语言，又是一种程序设计语言")])])]),s._v(" "),a("li",[a("p",[a("s",[s._v("Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务")])])]),s._v(" "),a("li",[a("p",[a("s",[s._v("Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell")])])]),s._v(" "),a("li",[a("p",[a("s",[s._v("shell 中文译作“壳”，可把它看成是连接用户与操作系统的桥梁")])])])]),s._v(" "),a("p",[s._v("具体来说，Shell 这个词有多种含义。")]),s._v(" "),a("ol",[a("li",[a("p",[a("strong",[s._v("首先，Shell 是一个程序")]),s._v("，提供一个与用户对话的环境。这个环境只有一个命令提示符，让用户从键盘输入命令，所以又称为"),a("strong",[s._v("命令行环境")]),s._v("（command line interface，简写为 CLI）。Shell 接收到用户输入的命令，将命令送入操作系统执行，并将结果返回给用户。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("其次，Shell 是一个命令解释器")]),s._v("，解释用户输入的命令。它支持变量、条件判断、循环操作等语法，所以用户可以用 Shell 命令写出各种小程序，又称为脚本（script）。这些脚本都通过 Shell 的解释执行，而不通过编译。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("最后，Shell 是一个工具箱")]),s._v("，提供了各种小工具，供用户方便地使用操作系统的功能。")])])]),s._v(" "),a("h2",{attrs:{id:"常用的-shell-有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的-shell-有哪些"}},[s._v("#")]),s._v(" 常用的 shell 有哪些")]),s._v(" "),a("blockquote",[a("p",[s._v("或者说实现了 shell 的软件（程序）有哪些")])]),s._v(" "),a("p",[s._v("在终端输入 "),a("code",[s._v("cat /etc/shells")]),s._v(" 查看本机可使用的所有 shell，目前有")]),s._v(" "),a("ol",[a("li",[a("p",[a("strong",[s._v("sh")]),s._v("（全称 Bourne Shell）：是 UNIX 最初使用的 shell，而且在每种 UNIX 上都可以使用。Bourne Shell 在 shell 编程方面相当优秀，但在处理与用户的交互方面做得不如其他几种 shell。")])]),s._v(" "),a("li",[a("p",[a("strong",[a("font",{attrs:{color:"red"}},[s._v("bash")])],1),s._v("（全称 Bourne Again Shell）：LinuxOS 默认的，它是 Bourne Shell 的扩展。 与 Bourne Shell 完全兼容，并且在 Bourne Shell 的基础上增加了很多特性。可以提供命令补全，命令编辑和命令历史等功能。它还包含了很多 C Shell 和 Korn Shell 中的优点，有灵活和强大的编辑接口，同时又很友好的用户界面。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("csh")]),s._v("（全称 C Shell）：是一种比 Bourne Shell 更适合的变种 Shell，它的语法与 C 语言很相似")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("zsh")]),s._v("：目前 mac 终端默认的一种 shell")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("tcsh")]),s._v("：是 Linux 提供的 C Shell 的一个扩展版本。tcsh 包括命令行编辑，可编程单词补全，拼写校正，历史命令替换，作业控制和类似 C 语言的语法，他不仅和 Bash Shell 提示符兼容，而且还提供比 Bash Shell 更多的提示符参数")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("ksh")]),s._v("（全称 Korn Shell）：集合了 C Shell 和 Bourne Shell 的优点并且和 Bourne Shell 完全兼容")])])]),s._v(" "),a("p",[s._v("在终端输入 "),a("code",[s._v("ps")]),s._v(" 查看本机当前正在使用的 shell，目前正在使用的 shell 为 zsh")]),s._v(" "),a("p",[s._v("另一种查看当前 shell 的简单方式是通过输入环境变量的形式："),a("code",[s._v("echo $SHELL")])]),s._v(" "),a("h2",{attrs:{id:"shell-脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shell-脚本"}},[s._v("#")]),s._v(" shell 脚本")]),s._v(" "),a("h3",{attrs:{id:"什么是脚本语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是脚本语言"}},[s._v("#")]),s._v(" 什么是脚本语言")]),s._v(" "),a("p",[s._v("脚本其实就是短小的、用来让计算机自动化完成一系列工作的程序，这类程序可以用文本编辑器修改，不需要编译，通常是解释运行的")]),s._v(" "),a("p",[s._v("我们常说的 shell、python 就是一种脚本语言")]),s._v(" "),a("h3",{attrs:{id:"shell-与-shell-脚本的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shell-与-shell-脚本的区别"}},[s._v("#")]),s._v(" shell 与 shell 脚本的区别")]),s._v(" "),a("p",[s._v("shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。Ken Thompson 的 sh 就是第一种 Unix Shell")]),s._v(" "),a("p",[s._v("shell 脚本（shell script），是一种用 shell 编写的脚本程序")]),s._v(" "),a("p",[s._v("业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念")]),s._v(" "),a("h3",{attrs:{id:"shebang"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shebang"}},[s._v("#")]),s._v(" shebang")]),s._v(" "),a("p",[s._v("计算机程序中，shebang 指的是出现在文本文件的第一行前两个字符 "),a("code",[s._v("#!")])]),s._v(" "),a("p",[s._v("在 Unix 系统中，程序会分析 shebang 后面的内容，并将其作为解释器的指令，例如")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("以 "),a("code",[s._v("#!/bin/sh")]),s._v(" 开头的文件，程序在执行的时候会调用 /bin/sh，也就是 bash 解释器")])]),s._v(" "),a("li",[a("p",[s._v("以 "),a("code",[s._v("#!/usr/bin/python")]),s._v(" 开头的文件，程序在执行时会调用 python 解释器去执行")])]),s._v(" "),a("li",[a("p",[s._v("以 "),a("code",[s._v("#!/usr/bin/env")]),s._v(" 解释器名称开头的文件，是一种在不同平台上都能找到正确解释器的方法")])])]),s._v(" "),a("p",[a("strong",[s._v("注意事项")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("如果脚本未指定 shebang，脚本执行的时候，则使用当前环境默认的 shell 去解释脚本")]),s._v(" "),a("ul",[a("li",[s._v("通过在命令行输入 echo $SHELL 查看当前 shell，本人的 mac 电脑当前的 shell 是 zsh")])])]),s._v(" "),a("li",[a("p",[s._v("如果 shebang 指定了可执行的解释器，如 "),a("code",[s._v("/bin/bash")]),s._v("、"),a("code",[s._v("/usr/bin/python")]),s._v("，脚本在执行时，文件名会作为参数传递给解释器")])]),s._v(" "),a("li",[a("p",[s._v("如果 "),a("code",[s._v("#!")]),s._v(" 指定的解释程序不是一个可执行文件，那么指定的解释程序会被忽略，转而交给当前的 SHELL 去执行这个脚本。")])]),s._v(" "),a("li",[a("p",[s._v("如果 "),a("code",[s._v("#!")]),s._v(" 指定的解释程序不存在，那么会报错 bad interpreter: No such file or directory")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("#!")]),s._v(" 之后的解释程序，需要写其绝对路径(如: "),a("code",[s._v("#!/bin/bash")]),s._v(") ，它是不会自动到 $PATH 中寻找解释器的")])]),s._v(" "),a("li",[a("p",[s._v("如果你使用 "),a("code",[s._v("bash test.sh")]),s._v(" 这样的命令来执行脚本，那么以 "),a("code",[s._v("#!")]),s._v(" 开头的这一行将会被忽略掉，此时解释器当然是用命令行中显式指定的 bash 啦")])])]),s._v(" "),a("h2",{attrs:{id:"bash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bash"}},[s._v("#")]),s._v(" Bash")]),s._v(" "),a("p",[s._v("以实现了 shell 的 "),a("strong",[s._v("bash")]),s._v(" 解释器为例进行 shell 脚本的学习")]),s._v(" "),a("h3",{attrs:{id:"变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[s._v("#")]),s._v(" 变量")]),s._v(" "),a("h4",{attrs:{id:"变量定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量定义"}},[s._v("#")]),s._v(" 变量定义")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("变量名=变量值")])]),s._v(" "),a("li",[a("code",[s._v("变量名='变量值'")])]),s._v(" "),a("li",[a("code",[s._v('变量名="变量值"')])])]),s._v(" "),a("p",[s._v("注意：等号 "),a("code",[s._v("=")]),s._v(" 前后不可有空格")]),s._v(" "),a("p",[a("strong",[s._v("引用变量")])]),s._v(" "),a("ol",[a("li",[a("code",[s._v("$变量名")])]),s._v(" "),a("li",[a("code",[s._v("${变量名}")])])]),s._v(" "),a("p",[a("strong",[s._v("删除变量")])]),s._v(" "),a("ol",[a("li",[a("code",[s._v("unset 变量名")]),s._v("， 删除变量或函数")])]),s._v(" "),a("p",[a("strong",[s._v("只读变量")])]),s._v(" "),a("ol",[a("li",[a("code",[s._v("readonly 变量名[=变量值]")]),s._v("，只有 shell 结束，只读变量才失效，定义了只读的变量，后期不可再修改其值")])]),s._v(" "),a("p",[a("strong",[s._v("注意事项")])]),s._v(" "),a("ol",[a("li",[a("p",[s._v("在给变量赋值时，单引号字符串不能识别特殊字符，双引号字符串能识别特殊字符")])]),s._v(" "),a("li",[a("p",[s._v("var="),a("code",[s._v("linux命令")]),s._v("，反引号里填写 linux 命令，该 shell 语句的含义就是运行该 linux 命令，并将运行结果保存到 var 变量中。与其等价的方式是 var=$(linux命令)")])])]),s._v(" "),a("h4",{attrs:{id:"变量类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量类型"}},[s._v("#")]),s._v(" 变量类型")]),s._v(" "),a("p",[s._v("运行 shell 时，会同时存在三种变量")]),s._v(" "),a("ol",[a("li",[a("p",[a("strong",[s._v("局部变量")]),s._v("，局部变量在脚本或命令中定义，仅在当前 shell 实例中有效，其他 shell 启动的程序不能访问局部变量。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("环境变量")]),s._v("，所有的程序，包括 shell 启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候 shell 脚本也可以定义环境变量。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("shell 变量")]),s._v("，shell 变量是由 shell 程序设置的特殊变量。shell 变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 shell 的正常运行")])])]),s._v(" "),a("h4",{attrs:{id:"环境变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境变量"}},[s._v("#")]),s._v(" 环境变量")]),s._v(" "),a("p",[s._v("环境变量一般是用 export 内置命令导出的变量，用于定义 shell 的运行环境、保证 shell 命令的正确运行\nshell 通过环境变量来确定登入的用户名、PATH路径、文件系统等各种应用\n环境变量可以在命令行中临时创建，但是用户退出 shell 终端变量即消失，如要永久生效，需要修改环境变量配置文件")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("用户个人配置文件 ~/.bash_profile、~/.bashrc 远程登入用户特有文件")])]),s._v(" "),a("li",[a("p",[s._v("全局配置文件 /etc/profile、/etc/bashrc，修改全局文件会影响系统所有登入的用户，所以不建议修改全局配置文件")])])]),s._v(" "),a("p",[a("strong",[s._v("检查系统环境变量的命令")])]),s._v(" "),a("ol",[a("li",[s._v("set，输出当前 shell 环境所有变量，包括全局变量、局部变量")]),s._v(" "),a("li",[s._v("env，只显示当前 shell 的全局变量")]),s._v(" "),a("li",[s._v("declare，输出所有变量，如同 set")]),s._v(" "),a("li",[s._v("export，显示和设置环境变量值")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 统计变量（全局变量+局部变量）个数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -l 参数表示统计输出内容的所有行数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wc")]),s._v(" -l\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从全局中查找以 name 开头的变量")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" ^name\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取当前 shell 的所有环境变量名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" -F "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'[=]'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print $1}'")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 统计全局变量个数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("env")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wc")]),s._v(" -l\n")])])]),a("p",[a("strong",[s._v("环境变量的执行顺序")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/liukj98/image-hosting@master/shell/1.42oxpqlg9r00.webp",alt:"1"}})]),s._v(" "),a("h4",{attrs:{id:"特殊变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊变量"}},[s._v("#")]),s._v(" 特殊变量")]),s._v(" "),a("h5",{attrs:{id:"参数变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数变量"}},[s._v("#")]),s._v(" 参数变量")]),s._v(" "),a("p",[s._v("shell 的特殊变量，主要用于脚本、函数传递参数等场景中，如下面特殊的位置参数变量")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("$0")]),s._v("：获取 shell 脚本文件名，以及脚本路径")]),s._v(" "),a("li",[a("code",[s._v("$n")]),s._v("：获取 shell 脚本的第n个参数，n在1~9之间，如$1 ，$2， $9，大于9则需要写 ${10}， 参数空格隔开")]),s._v(" "),a("li",[a("code",[s._v("$#")]),s._v("：获取执行的 shell 脚本后面的参数总个数")]),s._v(" "),a("li",[a("code",[s._v("$*")]),s._v("：获取 shell 脚本所有参数，不加引号等同于 "),a("code",[s._v("$@")]),s._v(" 作用，加上引号 "),a("code",[s._v('"\\$*"')]),s._v(" 其作用是接收所有参数为单个字符串，"),a("code",[s._v('"$1 $2..')])]),s._v(" "),a("li",[a("code",[s._v("$@")]),s._v('：不加引号，效果同上，加引号，是接收所有参数为独立字符串，如 "$1"  "$2"  "$3" ...， 空格保留')])]),s._v(" "),a("p",[a("strong",[s._v("实践")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# test.sh 文件内容")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'#############'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'获取 $0 参数'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'结果:'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'#############'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'获取 $1 $2 $3 参数'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'结果:'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'#############'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'获取参数个数'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'结果:'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'#############'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'获取 $* 参数'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'结果:'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$*")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'#############'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'获取 $@ 参数'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'结果:'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v(" test.sh lkj "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("34")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("55")]),s._v("\n")])])]),a("h5",{attrs:{id:"状态变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态变量"}},[s._v("#")]),s._v(" 状态变量")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("$?")]),s._v("：上一次命令执行状态的返回值，0正确，非0失败")]),s._v(" "),a("li",[a("code",[s._v("$$")]),s._v("：当前 shell 脚本的进程号")]),s._v(" "),a("li",[a("code",[s._v("$!")]),s._v("：上一次后台进程的 PID")]),s._v(" "),a("li",[a("code",[s._v("$_")]),s._v("：获取上一次命令传入的最后一个参数")])]),s._v(" "),a("p",[a("strong",[s._v("实践")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# test.sh 文件内容")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# $# 表示获取参数个数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -ne 表示不等于的情况")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# && 逻辑与")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#")]),s._v(" -ne "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"must be two args\n  exit 119 # 终止程序运行，且返回119状态码，提供给当前 shell 的 '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v(' 变量，若是在函数里可以使用 return 119 语法\n]\necho "')]),s._v('没毛病 就是两个参数"\n\n')])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 传递三个参数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v(" test.sh "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 传递两个参数 ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v(" test.sh "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$?")]),s._v("\n")])])]),a("h4",{attrs:{id:"变量的操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量的操作"}},[s._v("#")]),s._v(" 变量的操作")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("${变量}")]),s._v("：获取变量值")]),s._v(" "),a("li",[a("code",[s._v("${#变量}")]),s._v("：返回变量值长度，字符长度")]),s._v(" "),a("li",[a("code",[s._v("${变量:start}")]),s._v("：返回变量 start 数值之后的字符")]),s._v(" "),a("li",[a("code",[s._v("${变量:start:length}")]),s._v("：提取 start 之后的 length 限制的字符")]),s._v(" "),a("li",[a("code",[s._v("${变量#word}")]),s._v("：从变量开头，删除最短匹配的 word 子串")]),s._v(" "),a("li",[a("code",[s._v("${变量##word}")]),s._v("：从变量开头，删除最长匹配的 word")]),s._v(" "),a("li",[a("code",[s._v("${变量%word}")]),s._v("：从变量结尾删除最短的 word")]),s._v(" "),a("li",[a("code",[s._v("${变量%%word}")]),s._v("：从变量结尾开始删除最长匹配的 word")]),s._v(" "),a("li",[a("code",[s._v("${变量/pattern/string}")]),s._v("：用 string 代替第一 个匹配的 pattern")]),s._v(" "),a("li",[a("code",[s._v("${变量//pattern/ string}")]),s._v("：用 string 代替所有的 pattern")])]),s._v(" "),a("blockquote",[a("p",[s._v("在 pattern 中（模式匹配），有一些规则，如 * 符号表示通配符")]),s._v(" "),a("p",[s._v("a*c 表示开头为 a，中间任意字符，结尾为 c")]),s._v(" "),a("p",[s._v("a*C 表示开头为 a，中间任意字符，结尾为 C")]),s._v(" "),a("p",[s._v("*.jpg 表示以 .jpg 结尾的字符串")])]),s._v(" "),a("h4",{attrs:{id:"扩展变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展变量"}},[s._v("#")]),s._v(" 扩展变量")]),s._v(" "),a("p",[s._v("以下四个扩展变量，都属于对变量的值进行判断再处理，相当于其他编程语句中的 if else 语句语法糖")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("${paramgter:-word}")]),s._v("，如果 parameter 变量值为空，则返回 word 字符串，否则返回 paramgter 变量值")]),s._v(" "),a("li",[a("code",[s._v("${parameter:=word}")]),s._v("，如果 parameter 变量值为空，则 word 替代变量值， 且返回其值，否则返回 paramgter 变量值")]),s._v(" "),a("li",[a("code",[s._v("${parameter:?word}")]),s._v("，如果 parameter 变量值为空，则 word 当作 stderr 输出，否则返回 parameter 变量值。主要用于设置变量为空导致错误时，返回的错误信息")])]),s._v(" "),a("h3",{attrs:{id:"父子-shell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#父子-shell"}},[s._v("#")]),s._v(" 父子 shell")]),s._v(" "),a("blockquote",[a("p",[s._v("当终端模拟器一启动，会默认开启一个 shell 进程，该 shell 进程可能是 bash，也可能是 zsh，这取决于你自己对终端的默认设置。比如，mac 电脑默认开启的 shell 进程就是 zsh")]),s._v(" "),a("p",[s._v("我们可以通过诸如 bash、sh 等命令开启对应的 shell 进程，则开启的 shell 进程相对于上一个 shell 进程叫做 子shell，而上一个 shell 进程称为 父shell。要想退出当前的 shell 进程，使用 exit 命令即可")])]),s._v(" "),a("p",[s._v("子shell 中定义的变量在 父shell 中不能访问，同理 父shell 中定义的变量在 子shell 中也不能访问，也就是说 shell 中的变量是有作用域的")]),s._v(" "),a("h4",{attrs:{id:"执行-shell-脚本的三种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行-shell-脚本的三种方式"}},[s._v("#")]),s._v(" 执行 shell 脚本的三种方式")]),s._v(" "),a("ol",[a("li",[s._v("通过 source script 或 . script 的方式来执行脚本，会在当前 shell 环境中加载脚本并执行，脚本中所定义的变量会保留")]),s._v(" "),a("li",[s._v("通过 /bin/bash script 的方式来执行脚本，会开启一个子 shell 来执行对应的脚本，执行完毕后退回到原来的 父shell 中，此时脚本中所定义的变量也会相应销毁")]),s._v(" "),a("li",[s._v("通过 ./script 这种方式来执行脚本，该方式本质与第二种方式是一样的，都会创建子 shell。它会读取脚本第一行指定的解释器来执行脚本，如果没有指定 shell 解释器，则采用默认的 shell 解释器")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/liukj98/image-hosting@master/shell/7.28oltp6awaf4.webp",alt:"7"}})]),s._v(" "),a("h4",{attrs:{id:"父子-shell-关系图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#父子-shell-关系图"}},[s._v("#")]),s._v(" 父子 shell 关系图")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/liukj98/image-hosting@master/shell/8.6tjfbmlh9pk0.webp",alt:"8"}})]),s._v(" "),a("h4",{attrs:{id:"创建子-shell-环境来执行命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建子-shell-环境来执行命令"}},[s._v("#")]),s._v(" 创建子 shell 环境来执行命令")]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("为什么要创建子shell环境来执行命令？在当前shell环境中执行命令不好吗？")])]),s._v(" "),a("p",[s._v("答：若是在当前shell环境中执行命令，如 ping 命令，如果你不主动断开操作，则会一直卡在这里阻碍你后续的操作。而创建子shell 环境来执行命令并不会有这种影响")]),s._v(" "),a("p",[s._v("bash 中有一个变量 BASH_SUBSHELL，值为 0 表示在当前 shell 环境中，否则在子shell 环境中")])]),s._v(" "),a("p",[s._v("通过 (cmd1;cmd2;cmd3)  这种方式，使用 () 小括号将所要执行的命令包裹起来，则会先创建 子shell 然后在 子shell 环境中执行这些命令")]),s._v(" "),a("p",[s._v("每当将命令用 () 小括号括起来，都会先创建子shell，然后在执行命令")]),s._v(" "),a("p",[s._v("在终端运行 (ls; pwd; echo $BASH_SUBSHELL) 命令来检测是否是在子shell 环境中")]),s._v(" "),a("p",[s._v("子shell 的嵌套：(pwd;(echo $BASH_SUBSHELL))")]),s._v(" "),a("h3",{attrs:{id:"内置命令与外置命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置命令与外置命令"}},[s._v("#")]),s._v(" 内置命令与外置命令")]),s._v(" "),a("ol",[a("li",[a("p",[a("strong",[s._v("内置命令")]),s._v("：在系统启动时就加载入内存，常驻内存，执行效率更高，但是占用资源。使用 type 命令名 查看是否是内置命令")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("外置命令")]),s._v("：用户需要从硬盘中读取程序文件，再读入内存加载")])])]),s._v(" "),a("p",[s._v("外置命令一定会开启子进程来执行")]),s._v(" "),a("p",[s._v("内置命令不会产生子进程，内置命令和 shell 是为一体的，是 shell 的一部分，不需要单独去读取某个文件，系统启动后，就执行在内存中了")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出 npm is /Users/liukejun/.nvm/versions/node/v16.17.1/bin/npm")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 说明 npm 是外置命令")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输出 pwd is a shell builtin")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 说明 pwd 是内置命令")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看所有的内置命令")]),s._v("\ncompgen -b\n")])])]),a("p",[a("strong",[s._v("一些内置命令")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/liukj98/image-hosting@master/shell/2.mgwcb08muog.webp",alt:"2"}})]),s._v(" "),a("p",[a("strong",[s._v("执行多命令")])]),s._v(" "),a("p",[s._v("通过分号 ; 执行多条命令，如 "),a("code",[s._v("ls; cd /dev; ls -al")])]),s._v(" "),a("p",[a("strong",[s._v("数值计算的命令")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/liukj98/image-hosting@master/shell/3.3mpex3aatgw0.webp",alt:"3"}})]),s._v(" "),a("blockquote",[a("p",[s._v("当对某个命令不是很熟悉的时候，可以通过 man 命令 查看对应的的命令手册")])]),s._v(" "),a("h3",{attrs:{id:"流程控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流程控制"}},[s._v("#")]),s._v(" 流程控制")]),s._v(" "),a("h4",{attrs:{id:"条件测试-条件判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件测试-条件判断"}},[s._v("#")]),s._v(" 条件测试（条件判断）")]),s._v(" "),a("p",[s._v("使用条件测试的两种方式")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("使用 test 命令")]),s._v(" "),a("ol",[a("li",[s._v("数值测试")]),s._v(" "),a("li",[s._v("字符串测试")]),s._v(" "),a("li",[s._v("文件/文件夹属性测试")])])]),s._v(" "),a("li",[a("p",[s._v("使用中括号 [] 或双中括号 [[]] 或双小括号 (())")]),s._v(" "),a("ol",[a("li",[s._v("使用 [] 或 [[]] 进行条件测试时前后必须空格，如 [ condition ] 不能为 [condition]")]),s._v(" "),a("li",[s._v('在条件测试中使用变量，必须用双引号包裹，如 [ -f "$filename" ] && echo "OK"')]),s._v(" "),a("li",[s._v("双中括号 [[]] 支持正则表达式，是对中括号 [] 的一种扩展")])])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/liukj98/image-hosting@master/shell/4.5k38z2g3e3c0.webp",alt:"4"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/liukj98/image-hosting@master/shell/5.696nmukglb40.webp",alt:"5"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/liukj98/image-hosting@master/shell/6.4p0w82rs36g0.webp",alt:"6"}})]),s._v(" "),a("h4",{attrs:{id:"循环语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环语句"}},[s._v("#")]),s._v(" 循环语句")]),s._v(" "),a("h4",{attrs:{id:"for-循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-循环"}},[s._v("#")]),s._v(" for 循环")]),s._v(" "),a("div",{staticClass:"language-Perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 语法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" var in item1 item2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v(" itemN\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    command1\n    command2\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n    commandN\ndone\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 举例")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#! /bin/bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" num in "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$num"')]),s._v("\ndone\n")])])]),a("h4",{attrs:{id:"while-循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while-循环"}},[s._v("#")]),s._v(" while 循环")]),s._v(" "),a("div",{staticClass:"language-Perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# condition 有四种语法：[一些判断] 、 ((一些判断))、[[一些判断]]、test ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" condition\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    command\ndone\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 举例")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#! /bin/bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第一种形式")]),s._v("\nnum"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$num")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("ge")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n        echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v("\n        sleep "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\ndone\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第二种形式，注意和第一种形式的区别")]),s._v("\nnum"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$num")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n        echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v("\n        sleep "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\ndone\n")])])]),a("h4",{attrs:{id:"条件语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#条件语句"}},[s._v("#")]),s._v(" 条件语句")]),s._v(" "),a("div",{staticClass:"language-Perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if 语句语法格式")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# condition 有四种语法：[一些判断] 、 ((一些判断))、[[一些判断]]、test ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" condition\nthen\n    command1 \n    command2\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n    commandN \nfi\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if else 语法格式")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" condition\nthen\n    command1 \n    command2\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n    commandN\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n    command\nfi\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if else-if else 语法格式")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" condition1\nthen\n    command1\nelif condition2 \nthen \n    command2\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n    commandN\nfi\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 举例")]),s._v("\nnum"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$num")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("gt")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" then\n        echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v("\nfi\n")])])]),a("h3",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[s._v("#")]),s._v(" 函数")]),s._v(" "),a("div",{staticClass:"language-Perl extra-class"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 函数的标准定义")]),s._v("\nfunction funcName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 函数体代码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 函数的简写形式")]),s._v("\nfunction funcName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 函数体代码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 函数的懒人写法")]),s._v("\nfuncName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 函数体代码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行函数")]),s._v("\nfuncName\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通过 $? 获取函数的返回结果 ")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 举例")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#! /bin/bash")]),s._v("\nname"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lkj"')]),s._v("\nprintName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        echo "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$name")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nprintName\n")])])]),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.cn/post/7130982053528469511#heading-0",target:"_blank",rel:"noopener noreferrer"}},[s._v("Shell 基础知识"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/7052313930236067870#heading-2",target:"_blank",rel:"noopener noreferrer"}},[s._v("Linux shell 的演进史"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2017/05/fish_shell.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Fish shell 入门教程"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/63585679",target:"_blank",rel:"noopener noreferrer"}},[s._v("zsh"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://wangdoc.com/bash/intro",target:"_blank",rel:"noopener noreferrer"}},[s._v("Bash"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);